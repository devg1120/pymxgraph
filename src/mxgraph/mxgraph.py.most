

import base64
import urllib.parse
import zlib
import html
import defusedxml.ElementTree as dxml
import xml.etree.ElementTree as ET
# https://docs.python.org/ja/3/library/xml.etree.elementtree.html#module-xml.etree.ElementTree

from collections.abc import MutableMapping
from enum import Enum

class Vertex(Enum):
    NODE = 1
    PORT = 2
    ETC  = 3

def int_or_none(a):
    if a is None:
        return a
    return int(a)

def float_or_none(a):
    if a is None:
        return a
    return float(a)

def parse_style_string(s):
    def trysplit(x):
        try:
            k,v = x.split('=', maxsplit=1)
        except ValueError:
            k,v = x,None
        return k,v

    l = [ x.strip() for x in s.strip().split(';') ]
    if l[-1] == '':
        del l[-1]
    kvs = [ trysplit(x) for x in l ]
    return dict(kvs)

class CellStore(MutableMapping):
    """Keeps track of cells in a graph. The store will give every edge a unique id."""

    def __init__(self):
        self.current_id = 0
        self.cells = {}
        self.prefix = ''
        self.postfix = ''

    def __make_id(self, n):
        s = ''
        if self.prefix != '':
            s += self.prefix + '-'
        s += str(n)
        if self.postfix != '':
            s += '-' + self.postfix
        return s

    def new_id(self):
        """Return a new identifier that is not used yet."""
        newid = self.__make_id(self.current_id)
        while newid in self.cells:
            self.current_id += 1
            newid = self.__make_id(self.current_id)
        return newid

    def __getitem__(self, key):
        return self.cells[key]

    def __setitem__(self, key, value):
        self.cells[key] = value

    def __delitem__(self, key):
        del self.cells[key]

    def __iter__(self):
        return iter(self.cells)

    def __len__(self):
        return len(self.cells)

    def add_cell(self, cell):
        """Adds the cell cell to the store. It is stored under its cell_id."""
        self.cells[cell.cell_id] = cell
    def get_cell(self, cell_id):
        #print(cell_id)
        return self.cells[cell_id] 



class MxBase(MutableMapping):
    """Base class for elements that we can (de)serialize from/to XML or another format."""

    def __init__(self):
        self.attrs = {}

    def __getitem__(self, key):
        return self.attrs[key]

    def __setitem__(self, key, value):
        self.attrs[key] = value

    def __delitem__(self, key):
        del self.attrs[key]

    def __iter__(self):
        return iter(self.attrs)

    def __len__(self):
        return len(self.attrs)


class MxStyle(MxBase):
    """Stores style attributes."""

    def __init__(self, **kwargs):
        """Creates a style attribute from the key/value pairs in kwargs. Attributes in
        the style string without a value will have the value None in Python."""
        self.attrs = kwargs

    @classmethod
    def from_string(cls, s):
        mxstyle = MxStyle()
        mxstyle.attrs = parse_style_string(s)
        return mxstyle

    def __str__(self):
        return self.to_string()

    def to_string(self):
        shapes = [ k+';' for k,v in self.attrs.items() if v is None ]
        styles = [ k+'='+str(v)+';' for k,v in self.attrs.items() if v is not None ]
        return "".join(shapes + styles)

class MxPoint(MxBase):
    """Represents a mxPoint element.
    https://jgraph.github.io/mxgraph/docs/js-api/files/util/mxPoint-js.html
    """

    def __init__(self, x,y):
        super().__init__()
        self.x = x
        self.y = y

    @classmethod
    def from_xml(cls, cell_store, xml_element):
        #x = int(xml_element.get('x'))
        #y = int(xml_element.get('y'))

        x = ""
        y = ""
        if xml_element.get('x') != "None":
            x = float_or_none(xml_element.get('x'))
        else:
            x = "None"

        if xml_element.get('y') != "None":
            y = float_or_none(xml_element.get('y'))
        else:
            y = "None"

        point = MxPoint(x,y)
        point.attrs.update(xml_element.items())
        return point

    def to_xml(self):
        point_xml = ET.Element('mxPoint')
        if self.x :
          point_xml.set('x', str(self.x))
        if self.y :
          point_xml.set('y', str(self.y))
        return point_xml

class MxGeometry(MxBase):
    """Represents an mxGeometry element.
    https://jgraph.github.io/mxgraph/docs/js-api/files/model/mxGeometry-js.html
    """

    def __init__(self, x=None, y=None, width=None, height=None, relative=False ):
        super().__init__()
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.relative = relative
        self.points = []
        self.point = None
        self.source_point = None
        self.target_point = None
        self.z = "z"

    @classmethod
    def from_xml(cls, cell_store, xml_element):
        geom = MxGeometry(
                #int_or_none(xml_element.get('x')),
                #int_or_none(xml_element.get('y')),
                #int_or_none(xml_element.get('width')),
                #int_or_none(xml_element.get('height')),
                float_or_none(xml_element.get('x')),
                float_or_none(xml_element.get('y')),
                float_or_none(xml_element.get('width')),
                float_or_none(xml_element.get('height')),
                xml_element.get('relative') == '1')
        points = [ MxPoint.from_xml(cell_store, p) for p in xml_element.findall('Array/mxPoint') ]
        geom.points = points

        geom.point = [ MxPoint.from_xml(cell_store, p) for p in xml_element.findall('mxPoint') ]

        sp_xml = xml_element.find("mxPoint[@as='sourcePoint']")
        if sp_xml is not None:
            geom.source_point = MxPoint.from_xml(cell_store, sp_xml)
        tp_xml = xml_element.find("mxPoint[@as='targetPoint']")
        if tp_xml is not None:
            geom.target_point = MxPoint.from_xml(cell_store, tp_xml)
        return geom

    def to_xml(self):
        geom = ET.Element('mxGeometry')
        if self.x: geom.set('x', str(self.x))
        if self.y: geom.set('y', str(self.y))
        if self.width: geom.set('width', str(self.width))
        if self.height: geom.set('height', str(self.height))
        if self.relative: geom.set('relative', '1')
        geom.set('as', 'geometry')
        if self.source_point is not None:
            sp_xml = self.source_point.to_xml()
            sp_xml.set('as', 'sourcePoint')
            geom.append(sp_xml)
        if self.target_point is not None:
            sp_xml = self.target_point.to_xml()
            sp_xml.set('as', 'targetPoint')
            geom.append(sp_xml)
        #if self.points:
        #    print("points")
        #    array = ET.SubElement(geom, 'Array')
        #    array.set('as','points')
        #    array.extend([p.to_xml() for p in self.points])
        if self.points:
            if len(self.points) == 1:
                #print("point")
                p = ET.SubElement(geom, 'mxPoint')
                p.set('as','offset')
                p.set('x',str(self.points[0].x))
                p.set('y',str(self.points[0].y))
            if len(self.points) > 1:
                #print("points")
                array = ET.SubElement(geom, 'Array')
                array.set('as','points')
                array.extend([p.to_xml() for p in self.points])

        if self.point:
            #print("point")
            p = ET.SubElement(geom, 'mxPoint')
            #print(type(self.point))
            p.set('as','offset')
            p.set('x',str(self.point[0].x))
            p.set('y',str(self.point[0].y))
        return geom

class MxCell(MxBase):
    """Represents an mxCell element.
    https://jgraph.github.io/mxgraph/docs/js-api/files/model/mxCell-js.html
    """

    #def __init__(self, cell_store, cell_id, vertex=False, edge=False, value=None,**kwargs):
    def __init__(self, cell_store, cell_id, vertex=False, vertex_type=Vertex.ETC, edge=False, value=None,**kwargs):
        """cell_store is a CellStore object that we use to keep track of which cells
        are defined. This constructor does not add the cell to cell_store, you will
        need to do that yourself. Use the vertex or edge parameters to mark this cell
        as a vertex or an edge cell. Add any other attributes as keyword arguments in
        kwargs.
        """
        super().__init__()
        self.cell_store = cell_store
        self.cell_id = cell_id
        self._parent_id = None
        # self.value = None
        self.geometry = None
        self.style = None
        self.vertex = vertex
        self.vertex_type = vertex_type
        self.edge = edge
        # self.connectable = False
        # self.collapsed = False
        self._source_id = None
        self._target_id = None
        self._value = value                 #GS
        self.attrs.update(kwargs)

        self.right_port_count = 0
        self.left_port_count = 0
        self.top_port_count = 0
        self.bottom_port_count = 0

    def value(self):
        return self._value
    @property
    def parent(self):
        """Returns the cell's parent cell, and None if this is
        a top-level cell.
        """
        if self._parent_id is None:
            return None
        return self.cell_store[self._parent_id]

    @parent.setter
    #def parent(self, cell):
    def parent(self, cell_id):
        """Set the cell's parent to cell."""
        if cell_id is not None:
            #self._parent_id = cell.cell_id
            self._parent_id = cell_id
        else:
            self._parent_id = None

    @classmethod
    def from_xml(cls, cell_store, xml_element):
        # https://jgraph.github.io/mxgraph/docs/js-api/files/model/mxCell-js.html
        if False and xml_element.get('vertex'):
            cell = MxVertexCell.from_xml(cell_store, xml_element)
        elif False and xml_element.get('edge'):
            cell = MxEdgeCell.from_xml(cell_store, xml_element)
        else:
            cell = MxCell(cell_store, xml_element.get('id'))
        cell.cell_id = xml_element.get('id')
        cell._parent_id = xml_element.get('parent')
        cell._value = xml_element.get('value')
        cell.attrs = dict(xml_element.items())
        
        if xml_element.get('style') is not None:
            cell.style = MxStyle.from_string(xml_element.get('style'))
        geom = xml_element.find('mxGeometry')
        if geom is not None:
            cell.geometry = MxGeometry.from_xml(cell_store, geom)
        if xml_element.get('source') is not None:
            cell._source_id = xml_element.get('source')
        if xml_element.get('target') is not None:
            cell._target_id = xml_element.get('target')
        cell.vertex = xml_element.get('vertex') == '1'
        cell.vertex_type = xml_element.get('vertex_type')
        cell.edge = xml_element.get('edge') == '1'
        return cell

    def to_xml(self):
        cell_xml = ET.Element('mxCell')
        for k,v in self.attrs.items():
            cell_xml.set(k,v)
        cell_xml.set('id', self.cell_id)
        if self.parent is not None:
            cell_xml.set('parent', self.parent.cell_id)
        if self.style is not None:
            cell_xml.set('style', self.style.to_string())
        if self.source is not None:
            cell_xml.set('source', self.source.cell_id)
        if self.target is not None:
            cell_xml.set('target', self.target.cell_id)
        if self._value is not None:                             #GS
            cell_xml.set('value', self._value)                  #GS
        if self.geometry is not None:
            geom_xml = self.geometry.to_xml()
            cell_xml.append(geom_xml)
        if self.vertex:
            cell_xml.set('vertex', '1')
        if self.vertex_type:
            cell_xml.set('vertex_type', str(self.vertex_type))
        if self.edge:
            cell_xml.set('edge', '1')
        return cell_xml

    @property
    def source(self):
        """Gives the source cell of an edge cell, or None if not given. Raises a
        KeyError if the source cell does not exist.
        """
        if self._source_id is None:
            return None
        return self.cell_store.cells[self._source_id]

    @source.setter
    def source(self, cell):
        """Sets the source cell of an edge cell to cell."""
        self._source_id = cell.cell_id

    @property
    def target(self):
        """Gives the target cell of an edge cell, or None if not given. Raises a
        KeyError if the target cell does not exist.
        """
        if self._target_id is None:
            return None
        return self.cell_store.cells[self._target_id]

    @target.setter
    def target(self, cell):
        """Sets the target cell of an edge cell to cell."""
        self._target_id = cell.cell_id

    @property
    def value(self):
        if self._value is None:
            return None
        return self._value

    @target.setter
    def value(self, v):
        self._value = v
        self.attrs["value"] = v


class MxGraphModel(MxBase):
    """Represents an mxGraphModel object.
    https://jgraph.github.io/mxgraph/docs/js-api/files/model/mxGraphModel-js.html
    """

    def __init__(self):
        super().__init__()

    @classmethod
    def from_xml(cls, cell_store, xml_element):
        #print("---- from_xml")
        #print(ET.dump(xml_element))
        gm = MxGraphModel()
        gm.attrs = dict(xml_element.items())
        for x in xml_element.findall('.//root/mxCell'):
        #for x in xml_element.findall('root/mxCell'):
            cell_store.add_cell(MxCell.from_xml(cell_store, x))
        return gm

    def to_xml(self, cell_store):
        g_xml = ET.Element('mxGraphModel')
        for k,v in self.attrs.items():
            g_xml.set(k,v)
        root_xml = ET.SubElement(g_xml, 'root')
        root_xml.extend([c.to_xml() for c in cell_store.values()])
        return g_xml


class MxGraph:
    """MxGraph class is a convenience interface to manipulate graphs."""

    def __init__(self, diagram_id='DIAGRAMID'):
        self.cells = CellStore()
        self.mxgraph_model = MxGraphModel()
        self.root = MxCell(self.cells, "0")
        self.cells.add_cell(self.root)
        self.diagram_id = diagram_id
        self.cells.prefix = self.diagram_id
        self.port_size = 50

    def _get_parent(self, parent):
        if parent is None:
            return self.root
        return parent

    def _get_cell_id(self, cell_id):
        if cell_id is None:
            return self.cells.new_id()
        return cell_id

    def create_group_cell(self, parent = None, cell_id = None):
        """Create a group cell (neither an edge nor a vertex) with parent parent and
        cell identifier cell_id, to contain other cells.
        """
        parent = self._get_parent(parent)
        cell_id = self._get_cell_id(cell_id)
        cell = MxCell(self.cells, cell_id)
        cell.parent = parent
        self.cells.add_cell(cell)
        return cell

    #def insert_vertex(self, parent = None, cell_id = None, value = None, x = None, y = None, width = None, height = None, style = {}, relative = False):
    def insert_vertex(self, parent = None, cell_id = None, value = None, x = None, y = None, width = None, height = None, vertex_type = Vertex.ETC, style = {}, relative = False):
        """Insert a vertex cell to the graph, having parent parent, cell identifier cell_id and other attributes
        as described in https://jgraph.github.io/mxgraph/docs/js-api/files/view/mxGraph-js.html#mxGraph.insertVertex"""
        parent = self._get_parent(parent)
        cell_id = self._get_cell_id(cell_id)
        cell = MxCell(self.cells, cell_id, vertex=True, vertex_type = vertex_type, value=value) #GS
        cell.style = MxStyle(**style)
        cell.geometry = MxGeometry(x=x, y=y, width=width, height=height, relative=relative)
        cell.parent = parent
        self.cells.add_cell(cell)
        return cell

    def insert_edge(self, parent=None, cell_id=None, value=None, source=None, target=None, style={}):
        """Insert an edge cell to the graph, having parent parent, cell identifier cell_id and other attributes
        as described in https://jgraph.github.io/mxgraph/docs/js-api/files/view/mxGraph-js.html#mxGraph.insertEdge
        straight-line
        bending-line
        """
        parent = self._get_parent(parent)
        cell_id = self._get_cell_id(cell_id)
        cell = MxCell(self.cells, cell_id, edge=True, value=value)  #GS
        if not isinstance(source, MxCell):
            raise Exception("invalid source cell")
        if not isinstance(target, MxCell):
            raise Exception("invalid target cell")
        cell.geometry = MxGeometry(relative=True)
        cell.source = source
        cell.target = target
        cell.style = MxStyle(**style)
        cell.parent = parent
        self.cells.add_cell(cell)
        return cell

    def set_edge_src_label(self, parent, label, style={}):
        #print(parent.cell_id)
        cell_id = parent.cell_id + "-edge_src_label"
        #print(cell_id)
        cell = MxCell(self.cells, cell_id, vertex=True, value=label )  #GS
        cell.geometry = MxGeometry( x="-0.8" ,relative=True)
        cell.style = MxStyle(**style)
        cell.parent = parent
        self.cells.add_cell(cell)
        return cell
        
    def set_edge_dst_label(self, parent, label, style={}):
        #print(parent.cell_id)
        cell_id = parent.cell_id + "-edge_dst_label"
        #print(cell_id)
        cell = MxCell(self.cells, cell_id, vertex=True, value=label )  #GS
        cell.geometry = MxGeometry( x="0.8" ,relative=True)
        cell.style = MxStyle(**style)
        cell.parent = parent
        self.cells.add_cell(cell)
        return cell

    def add_right_port(self, parent, label, value, offset_y, style={}):
        parent.right_port_count +=1
        #print(label)
        #print(parent.cell_id)
        no = parent.right_port_count
        #cell_id = parent.cell_id + "-right_port" + str(no)
        cell_id = parent.cell_id + "-" + label
        #print(cell_id)
        x = parent.geometry.width
        h = parent.geometry.height
        n = parent.right_port_count
        #print(x)

        cell = MxCell(self.cells, cell_id, vertex=True, value=value )  #GS
        #point_ = MxPoint(None,30)
        point_ = MxPoint(None,offset_y)
        cell.geometry = MxGeometry( x=1, width=self.port_size, height=self.port_size, relative=True)
        cell.geometry.points = [ point_ ]
        cell.style = MxStyle(**style)
        cell.parent = parent
        self.cells.add_cell(cell)
        return cell
    
    def add_left_port(self, parent, label, value, offset_y, style={}):
        parent.left_port_count +=1
        #print(label)
        #print(parent.cell_id)
        no = parent.left_port_count
        #cell_id = parent.cell_id + "-left_port" + str(no)
        cell_id = parent.cell_id + "-" + label
        #print(cell_id)
        x = parent.geometry.width
        #print(x)
        cell = MxCell(self.cells, cell_id, vertex=True, value=value )  #GS
        #point_ = MxPoint(-50,30)
        point_ = MxPoint(-self.port_size,offset_y)
        cell.geometry = MxGeometry( width=self.port_size, height=self.port_size, relative=True)
        cell.geometry.points = [ point_ ]
        cell.style = MxStyle(**style)
        cell.parent = parent
        self.cells.add_cell(cell)
        return cell

    def add_top_port(self, parent, label, value, offset_x, style={}):
        parent.top_port_count +=1
        #print(label)
        #print(parent.cell_id)
        no = parent.top_port_count
        #cell_id = parent.cell_id + "-top_port" + str(no)
        cell_id = parent.cell_id + "-" + label
        #print(cell_id)
        x = parent.geometry.width
        #print(x)
        cell = MxCell(self.cells, cell_id, vertex=True, value=value )  #GS
        #point_ = MxPoint(30,-50)
        point_ = MxPoint(offset_x,-self.port_size)
        cell.geometry = MxGeometry( width=self.port_size, height=self.port_size, relative=True)
        cell.geometry.points = [ point_ ]
        cell.style = MxStyle(**style)
        cell.parent = parent
        self.cells.add_cell(cell)
        return cell

    def add_bottom_port(self, parent, label, value, offset_x,style={}):
        parent.bottom_port_count +=1
        #print(label)
        #print(parent.cell_id)
        no = parent.bottom_port_count
        #cell_id = parent.cell_id + "-bottom_port" + str(no)
        cell_id = parent.cell_id + "-" + label
        #print(cell_id)
        x = parent.geometry.width
        h = parent.geometry.height
        #print(x)
        #print(h)
        cell = MxCell(self.cells, cell_id, vertex=True, value=value )  #GS
        point_ = MxPoint(offset_x, None )
        cell.geometry = MxGeometry( y=1, width=self.port_size, height=self.port_size, relative=True)
        cell.geometry.points = [ point_ ]
        cell.style = MxStyle(**style)
        cell.parent = parent
        self.cells.add_cell(cell)
        return cell

    def add_edge_geometry(self, edge, points):
        """Add a geometry to the edge edge, consisting of
        the intermediate points in points (an array of (x,y)
        integer pairs).
        """
        edge.geometry.points = [MxPoint(*p) for p in points]

    def set_source_point(self, edge, point):
        """Sets the edge's source point to point (an (x,y)
        integer pair."""
        edge.geometry.source_point = MxPoint(*point)

    def set_target_point(self, edge, point):
        """Sets the edge's target point to point (an (x,y)
        integer pair."""
        edge.geometry.target_point = MxPoint(*point)

    @classmethod
    def from_file_compress(cls, f):
        g = MxGraph()
        et = dxml.parse(f)
        root = et.getroot()
        diagram = root.find('diagram')
        g.diagram_id = diagram.get('id')
        g.cells.prefix = g.diagram_id
        t = urllib.parse.unquote(zlib.decompress(base64.b64decode(diagram.text), -zlib.MAX_WBITS).decode("utf-8"))
        graph_xml = dxml.fromstring(t)
        g.mxgraph_model = MxGraphModel.from_xml(g.cells, graph_xml)
        return g

    def from_file_org(self, f):
        g = MxGraph()
        et = dxml.parse(f)
        root = et.getroot()
        diagram = root.find('diagram')
        g.diagram_id = diagram.get('id')
        print(g.diagram_id)
        g.cells.prefix = g.diagram_id
        #graph = diagram.find('mxGraphModel/root')
        #print(ET.dump(diagram))
        g.mxgraph_model = MxGraphModel.from_xml(g.cells, diagram)
        return g

    def from_file(self, f ):
        #g = MxGraph()
        et = dxml.parse(f)
        root = et.getroot()
        lists = root.findall('.//diagram')
        gdict = {}
        for diagram in lists:
             g = MxGraph()
             g.diagram_id = diagram.get('id')
             g.diagram_name = diagram.get('name')
             diagram_id = diagram.get('id')
             g.mxgraph_model = MxGraphModel.from_xml(g.cells, diagram)
             gdict[diagram_id] = g

        return gdict

    def from_file_getbyid(self, f, _id):
        g = MxGraph()
        et = dxml.parse(f)
        root = et.getroot()
        lists = root.findall('.//diagram')
        for diagram in lists:
            if _id == diagram.get('id'):
                g.diagram_id = diagram.get('id')
                #print(g.diagram_id)
                g.cells.prefix = g.diagram_id
                graph_xml = diagram
                #print(graph_xml)
                #print(ET.dump(graph_xml))
                g.mxgraph_model = MxGraphModel.from_xml(g.cells, graph_xml)
                return g
        return g

    def to_file_compress(self, f):
        diagram_xml = ET.Element('diagram')
        diagram_xml.set('id', self.diagram_id)
        diagram_xml.set('name', 'Page-1')
        graph_xml = self.mxgraph_model.to_xml(self.cells)
        s = dxml.tostring(graph_xml)
        co = zlib.compressobj(wbits=-zlib.MAX_WBITS)
        b = co.compress( bytes(urllib.parse.quote(s), 'ascii'))
        b += co.flush(zlib.Z_FINISH)
        s = base64.b64encode(b)
        diagram_xml.text = s.decode('utf-8')
        mxfile_xml = ET.Element('mxfile')
        mxfile_xml.set('host', 'py-mxgraph')
        # mxfile_xml.set('modified', 'TODO')
        # mxfile_xml.set('version', 'TODO')
        # mxfile_xml.set('type', 'device')
        mxfile_xml.append(diagram_xml)
        # TODO: dump to file f, not stdout
        # ET.dump(mxfile_xml)
        f.write(dxml.tostring(mxfile_xml).decode('utf-8'))

    def to_file(self, f, name='Page-1'):
        diagram_xml = ET.Element('diagram')
        diagram_xml.set('id', self.diagram_id + "###")
        #diagram_xml.set('name', 'Page-1')
        diagram_xml.set('name', name)
        graph_xml = self.mxgraph_model.to_xml(self.cells)
        diagram_xml.append(graph_xml)
        mxfile_xml = ET.Element('mxfile')
        mxfile_xml.set('host', 'py-mxgraph')
        # mxfile_xml.set('modified', 'TODO')
        # mxfile_xml.set('version', 'TODO')
        # mxfile_xml.set('type', 'device')
        mxfile_xml.append(diagram_xml)
        # TODO: dump to file f, not stdout
        #ET.dump(mxfile_xml)
        f.write(dxml.tostring(mxfile_xml).decode('utf-8'))

    def to_file_by_cells(self, f, cells, name='Page-1'):
        diagram_xml = ET.Element('diagram')
        diagram_xml.set('id', self.diagram_id)
        #diagram_xml.set('name', 'Page-1')
        diagram_xml.set('name', name)
        graph_xml = self.mxgraph_model.to_xml(cells)
        diagram_xml.append(graph_xml)
        mxfile_xml = ET.Element('mxfile')
        mxfile_xml.set('host', 'py-mxgraph')
        # mxfile_xml.set('modified', 'TODO')
        # mxfile_xml.set('version', 'TODO')
        # mxfile_xml.set('type', 'device')
        mxfile_xml.append(diagram_xml)
        # TODO: dump to file f, not stdout
        #ET.dump(mxfile_xml)
        f.write(dxml.tostring(mxfile_xml).decode('utf-8'))


def multi_graph_to_file( graphs , f):
        mxfile_xml = ET.Element('mxfile')
        mxfile_xml.set('host', 'py-mxgraph')
        count = 0
        for g in graphs:
           count += 1
           diagram_xml = ET.Element('diagram')
           diagram_xml.set('id', g.diagram_id)
           diagram_xml.set('name', 'Page-' + str(count))
           graph_xml = g.mxgraph_model.to_xml(g.cells)
           diagram_xml.append(graph_xml)
           mxfile_xml.append(diagram_xml)

        f.write(dxml.tostring(mxfile_xml).decode('utf-8'))

def multi_graphdict_to_file( graphdict , f):
        #print("multi_graphdict_to_file()")
        mxfile_xml = ET.Element('mxfile')
        mxfile_xml.set('host', 'py-mxgraph')
        count = 0
        for k in graphdict:
           count += 1
           g = graphdict[k]
           diagram_xml = ET.Element('diagram')
           diagram_xml.set('id', g.diagram_id)
           #diagram_xml.set('name', 'Page-' + str(count))
           diagram_xml.set('name', k )
           graph_xml = g.mxgraph_model.to_xml(g.cells)
           diagram_xml.append(graph_xml)
           mxfile_xml.append(diagram_xml)

        f.write(dxml.tostring(mxfile_xml).decode('utf-8'))

